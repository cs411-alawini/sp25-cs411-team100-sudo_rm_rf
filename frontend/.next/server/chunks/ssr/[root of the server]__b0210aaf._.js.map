{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 15, "column": 0}, "map": {"version":3,"sources":["file:///Users/pranjalchaitanya/Documents/sp25-cs411-team100-sudo_rm_rf/frontend/app/HomePage.tsx"],"sourcesContent":["'use client';\n\nimport { useState, useEffect } from 'react';\n\n// Define interfaces for the expected data structures from your backend endpoints\n// These are examples and may need adjustment based on your actual backend responses.\n\n// Interface for the original search endpoint (/search/) - based on your provided code and backend\ninterface OriginalSearchResult {\n  rxcui: string;\n  lat: string;\n  ts: string | null;\n  lui: string | null;\n  stt: string | null;\n  sui: string | null;\n  ispref: string | null;\n  rxaui: string;\n  saui: string | null;\n  scui: string | null;\n  sdui: string | null;\n  sab: string;\n  tty: string;\n  str: string;\n  srl: string | null;\n  suppress: string | null;\n  cvf: string | null;\n}\n\n\n// Interfaces for the four new query endpoints (adjust based on your backend)\ninterface TopInteraction {\n    avg_prr: number;\n    interaction_count: number;\n    drug_1_name: string;\n    drug_2_name: string;\n}\n\ninterface SubstanceConditions {\n    drug_name: string;\n    RXCUI: string;\n    condition_count: number;\n}\n\ninterface UserDrugs {\n    RXCUI: string;\n    // Add other drug details if your endpoint returns them\n}\n\ninterface DrugInteractions {\n    RXCUI2: string; // Or RXCUI1, depending on which is the interacting drug in the result\n    interaction_count: number;\n    // Add other details about the interacting drug if available\n}\n\n\nexport default function Home() {\n    // Original State for the initial search\n    const [originalQuery, setOriginalQuery] = useState('');\n    const [originalSearchResults, setOriginalSearchResults] = useState<OriginalSearchResult[]>([]);\n    const [loadingOriginalSearch, setLoadingOriginalSearch] = useState(false);\n    const [errorOriginalSearch, setErrorOriginalSearch] = useState<string | null>(null);\n\n\n    // State for Query 1: Top Interactions by PRR\n    const [topInteractions, setTopInteractions] = useState<TopInteraction[]>([]);\n    const [loadingTopInteractions, setLoadingTopInteractions] = useState(false);\n    const [errorTopInteractions, setErrorTopInteractions] = useState<string | null>(null);\n\n    // State for Query 2: Substances Invoking Most Conditions\n    const [substanceConditions, setSubstanceConditions] = useState<SubstanceConditions[]>([]);\n    const [loadingSubstanceConditions, setLoadingSubstanceConditions] = useState(false);\n    const [errorSubstanceConditions, setErrorSubstanceConditions] = useState<string | null>(null);\n\n    // State for Query 3: User's Drugs\n    const [userId, setUserId] = useState('');\n    const [userDrugs, setUserDrugs] = useState<UserDrugs[]>([]);\n    const [loadingUserDrugs, setLoadingUserDrugs] = useState(false);\n    const [errorUserDrugs, setErrorUserDrugs] = useState<string | null>(null);\n\n    // State for Query 4: Drugs Interacting Most with a Given Drug\n    const [drugRxcui, setDrugRxcui] = useState('');\n    const [drugInteractions, setDrugInteractions] = useState<DrugInteractions[]>([]);\n    const [loadingDrugInteractions, setLoadingDrugInteractions] = useState(false);\n    const [errorDrugInteractions, setErrorDrugInteractions] = useState<string | null>(null);\n\n    const [isClient, setIsClient] = useState(false);\n\n    useEffect(() => {\n        setIsClient(true);\n    }, []);\n\n    useEffect(() => {\n        if (localStorage.getItem('email') === null) {\n            window.location.href = '/login';\n        }\n    }, [])\n\n     // Original Handler for the initial search\n     const handleOriginalSearch = async () => {\n        if (!originalQuery) {\n            setOriginalSearchResults([]);\n            return;\n        }\n        setLoadingOriginalSearch(true);\n        setErrorOriginalSearch(null);\n        try {\n            // Original API endpoint for the initial search\n            const res = await fetch(`http://localhost:8000/search/?q=${originalQuery}`);\n            if (!res.ok) {\n                 throw new Error(`HTTP error! status: ${res.status}`);\n            }\n            const data: OriginalSearchResult[] = await res.json();\n            setOriginalSearchResults(data);\n        } catch (error: any) {\n            setErrorOriginalSearch(error.message);\n        } finally {\n            setLoadingOriginalSearch(false);\n        }\n     };\n\n\n    // Handler for Query 1: Fetch Top Interactions\n    const fetchTopInteractions = async () => {\n        setLoadingTopInteractions(true);\n        setErrorTopInteractions(null);\n        try {\n            // Replace with your actual API endpoint for Query 1\n            const res = await fetch('http://localhost:8000/api/top-interactions-by-prr');\n            if (!res.ok) {\n                 throw new Error(`HTTP error! status: ${res.status}`);\n            }\n            const data: TopInteraction[] = await res.json();\n            setTopInteractions(data);\n        } catch (error: any) {\n            setErrorTopInteractions(error.message);\n        } finally {\n            setLoadingTopInteractions(false);\n        }\n    };\n\n    // Handler for Query 2: Fetch Substances Invoking Most Conditions\n    const fetchSubstanceConditions = async () => {\n        setLoadingSubstanceConditions(true);\n        setErrorSubstanceConditions(null);\n        try {\n            // Replace with your actual API endpoint for Query 2\n            const res = await fetch('http://localhost:8000/api/top-drugs-by-conditions');\n             if (!res.ok) {\n                 throw new Error(`HTTP error! status: ${res.status}`);\n            }\n            const data: SubstanceConditions[] = await res.json();\n            setSubstanceConditions(data);\n        } catch (error: any) {\n            setErrorSubstanceConditions(error.message);\n        } finally {\n            setLoadingSubstanceConditions(false);\n        }\n    };\n\n    // Handler for Query 3: Fetch User's Drugs by User ID\n    const fetchUserDrugs = async () => {\n        if (!userId) {\n            setUserDrugs([]);\n            return;\n        }\n        setLoadingUserDrugs(true);\n        setErrorUserDrugs(null);\n        try {\n            // Replace with your actual API endpoint for Query 3, using userId as a query parameter\n            const res = await fetch(`YOUR_BACKEND_API_ENDPOINT/user-drugs/?userId=${userId}`);\n             if (!res.ok) {\n                 throw new Error(`HTTP error! status: ${res.status}`);\n            }\n            const data: UserDrugs[] = await res.json();\n            setUserDrugs(data);\n        } catch (error: any) {\n            setErrorUserDrugs(error.message);\n        } finally {\n            setLoadingUserDrugs(false);\n        }\n    };\n\n    // Handler for Query 4: Fetch Drugs Interacting Most with a Given Drug\n    const fetchDrugInteractions = async () => {\n         if (!drugRxcui) {\n            setDrugInteractions([]);\n            return;\n        }\n        setLoadingDrugInteractions(true);\n        setErrorDrugInteractions(null);\n        try {\n            // Replace with your actual API endpoint for Query 4, using drugRxcui as a query parameter\n            const res = await fetch(`http://localhost:8000/api/interacting-drugs/${drugRxcui}`);\n             if (!res.ok) {\n                 throw new Error(`HTTP error! status: ${res.status}`);\n            }\n            const data: DrugInteractions[] = await res.json();\n            setDrugInteractions(data);\n        } catch (error: any) {\n            setErrorDrugInteractions(error.message);\n        } finally {\n            setLoadingDrugInteractions(false);\n        }\n    };\n\n\n    return (\n        <div className=\"p-4 max-w-4xl mx-auto space-y-8\">\n            <h1 className=\"text-3xl font-bold text-center mb-8\">MedWise Application Entry Point</h1>\n\n             {/* Original Search Section */}\n            <div className=\"border p-4 rounded shadow\">\n                <h2 className=\"text-2xl font-semibold mb-4\">Search Drug Concepts (Original)</h2>\n                <input\n                    type=\"text\" // Changed from number to text based on previous discussion\n                    value={originalQuery}\n                    onChange={(e) => setOriginalQuery(e.target.value)}\n                    className=\"border p-2 w-full mb-4 rounded\"\n                    placeholder=\"Search by RXCUI or name...\"\n                />\n                <button\n                    onClick={handleOriginalSearch}\n                    className=\"bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600\"\n                >\n                    Search\n                </button>\n\n                {loadingOriginalSearch && <p className=\"mt-2\">Loading original search results...</p>}\n                {errorOriginalSearch && <p className=\"mt-2 text-red-500\">Error: {errorOriginalSearch}</p>}\n                {!loadingOriginalSearch && !errorOriginalSearch && originalSearchResults.length > 0 && (\n                    <ul className=\"mt-4 space-y-2\">\n                        {originalSearchResults.map((item, index) => (\n                           // Assuming RXAUI is unique for the key based on the original search result structure\n                           <li key={item.rxaui || index} className=\"border-b py-2\">\n                                <strong>Atom name: {item.str}</strong>{\"\\n\"}\n                                RXCUI: {item.rxcui},\n                                RXAUI: {item.rxaui},\n                                Source vocabulary: {item.sab},\n                                Term Type: {item.tty}\n                            </li>\n                        ))}\n                    </ul>\n                )}\n                 {!loadingOriginalSearch && !errorOriginalSearch && originalSearchResults.length === 0 && originalQuery && (\n                    <p className=\"mt-2\">No results found for \"{originalQuery}\".</p>\n                 )}\n                  {!loadingOriginalSearch && !errorOriginalSearch && originalSearchResults.length === 0 && !originalQuery && (\n                    <p className=\"mt-2\">Enter a query in the search box above.</p>\n                 )}\n            </div>\n\n\n            {/* Section for Query 1: Top Interactions by PRR */}\n            <div className=\"border p-4 rounded shadow\">\n                <h2 className=\"text-2xl font-semibold mb-4\">Top 15 Interactions by PRR</h2>\n                <button\n                    onClick={fetchTopInteractions}\n                    className=\"bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600\"\n                >\n                    Fetch Top Interactions\n                </button>\n\n                {loadingTopInteractions && <p className=\"mt-2\">Loading top interactions...</p>}\n                {errorTopInteractions && <p className=\"mt-2 text-red-500\">Error: {errorTopInteractions}</p>}\n                {!loadingTopInteractions && !errorTopInteractions && topInteractions.length > 0 && (\n                    <ul className=\"mt-4 space-y-2\">\n                        {topInteractions.map((item, index) => (\n                            <li key={index} className=\"border-b py-2\">\n                                <p><strong>Drug 1:</strong> {item.drug_1_name}</p>\n                                <p><strong>Drug 2:</strong> {item.drug_2_name}</p>\n                                <p><strong>Average PRR:</strong> {item.avg_prr}</p>\n                                <p><strong>Interaction Count:</strong> {item.interaction_count}</p>\n                            </li>\n                        ))}\n                    </ul>\n                )}\n                 {!loadingTopInteractions && !errorTopInteractions && topInteractions.length === 0 && (\n                    <p className=\"mt-2\">No top interactions found.</p>\n                 )}\n            </div>\n\n            {/* Section for Query 2: Substances Invoking Most Conditions */}\n             <div className=\"border p-4 rounded shadow\">\n                <h2 className=\"text-2xl font-semibold mb-4\">Substances Invoking Most Conditions</h2>\n                 <button\n                    onClick={fetchSubstanceConditions}\n                    className=\"bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600\"\n                >\n                    Fetch Substances\n                </button>\n                {loadingSubstanceConditions && <p className=\"mt-2\">Loading substance conditions...</p>}\n                {errorSubstanceConditions && <p className=\"mt-2 text-red-500\">Error: {errorSubstanceConditions}</p>}\n                {!loadingSubstanceConditions && !errorSubstanceConditions && substanceConditions.length > 0 && (\n                    <ul className=\"mt-4 space-y-2\">\n                        {substanceConditions.map((item, index) => (\n                            <li key={index} className=\"border-b py-2\">\n                                <p><strong>Drug Name:</strong> {item.drug_name}</p>\n                                <p><strong>RXCUI:</strong> {item.RXCUI}</p>\n                                <p><strong>Condition Count:</strong> {item.condition_count}</p>\n                            </li>\n                        ))}\n                    </ul>\n                )}\n                 {!loadingSubstanceConditions && !errorSubstanceConditions && substanceConditions.length === 0 && (\n                    <p className=\"mt-2\">No substance conditions found.</p>\n                 )}\n            </div>\n\n            {/* Section for Query 3: User's Drugs */}\n            <div className=\"border p-4 rounded shadow\">\n                <h2 className=\"text-2xl font-semibold mb-4\">List Drugs for a User</h2>\n                <input\n                    type=\"text\" // Use text type for potential non-numeric user IDs or flexibility\n                    value={userId}\n                    onChange={(e) => setUserId(e.target.value)}\n                    className=\"border p-2 w-full mb-4 rounded\"\n                    placeholder=\"Enter User ID\"\n                />\n                <button\n                    onClick={fetchUserDrugs}\n                    className=\"bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600\"\n                >\n                    Fetch User's Drugs\n                </button>\n                {loadingUserDrugs && <p className=\"mt-2\">Loading user's drugs...</p>}\n                {errorUserDrugs && <p className=\"mt-2 text-red-500\">Error: {errorUserDrugs}</p>}\n                 {!loadingUserDrugs && !errorUserDrugs && userDrugs.length > 0 && (\n                    <ul className=\"mt-4 space-y-2\">\n                        {userDrugs.map((item, index) => (\n                            <li key={index} className=\"border-b py-2\">\n                                <p><strong>Drug RXCUI:</strong> {item.RXCUI}</p>\n                                {/* Display other drug details if available */}\n                            </li>\n                        ))}\n                    </ul>\n                )}\n                 {!loadingUserDrugs && !errorUserDrugs && userDrugs.length === 0 && userId && (\n                    <p className=\"mt-2\">No drugs found for User ID \"{userId}\".</p>\n                 )}\n                  {!loadingUserDrugs && !errorUserDrugs && userDrugs.length === 0 && !userId && (\n                    <p className=\"mt-2\">Enter a User ID to search for drugs.</p>\n                 )}\n            </div>\n\n            {/* Section for Query 4: Drugs Interacting Most with a Given Drug */}\n             <div className=\"border p-4 rounded shadow\">\n                <h2 className=\"text-2xl font-semibold mb-4\">Drugs Interacting Most with a Given Drug</h2>\n                <input\n                    type=\"text\" // Use text type for potential non-numeric RXCUIs or flexibility\n                    value={drugRxcui}\n                    onChange={(e) => setDrugRxcui(e.target.value)}\n                    className=\"border p-2 w-full mb-4 rounded\"\n                    placeholder=\"Enter Drug RXCUI\"\n                />\n                <button\n                    onClick={fetchDrugInteractions}\n                    className=\"bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600\"\n                >\n                    Fetch Interactions\n                </button>\n                {loadingDrugInteractions && <p className=\"mt-2\">Loading drug interactions...</p>}\n                {errorDrugInteractions && <p className=\"mt-2 text-red-500\">Error: {errorDrugInteractions}</p>}\n                {!loadingDrugInteractions && !errorDrugInteractions && drugInteractions.length > 0 && (\n                    <ul className=\"mt-4 space-y-2\">\n                        {drugInteractions.map((item, index) => (\n                            <li key={index} className=\"border-b py-2\">\n                                <p><strong>Interacting Drug RXCUI:</strong> {item.RXCUI2}</p> {/* Adjust field name based on your backend response */}\n                                <p><strong>Interaction Count:</strong> {item.interaction_count}</p>\n                                {/* Display other interacting drug details if available */}\n                            </li>\n                        ))}\n                    </ul>\n                )}\n                 {!loadingDrugInteractions && !errorDrugInteractions && drugInteractions.length === 0 && drugRxcui && (\n                    <p className=\"mt-2\">No interactions found for drug RXCUI \"{drugRxcui}\".</p>\n                 )}\n                 {!loadingDrugInteractions && !errorDrugInteractions && drugInteractions.length === 0 && !drugRxcui && (\n                    <p className=\"mt-2\">Enter a Drug RXCUI to search for interactions.</p>\n                 )}\n            </div>\n\n        </div>\n    );\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 788, "column": 0}, "map": {"version":3,"sources":["file:///Users/pranjalchaitanya/Documents/sp25-cs411-team100-sudo_rm_rf/frontend/app/page.tsx"],"sourcesContent":["'use client';\n\nimport HomePage from \"./HomePage\";\n\nexport default function Home() {\n    return <HomePage />;\n}"],"names":[],"mappings":";;;;AAEA;AAFA;;;AAIe,SAAS;IACpB,qBAAO,8OAAC,gHAAA,CAAA,UAAQ;;;;;AACpB","debugId":null}},
    {"offset": {"line": 808, "column": 0}, "map": {"version":3,"sources":["file:///Users/pranjalchaitanya/Documents/sp25-cs411-team100-sudo_rm_rf/frontend/node_modules/next/src/server/route-modules/app-page/module.compiled.js"],"sourcesContent":["if (process.env.NEXT_RUNTIME === 'edge') {\n  module.exports = require('next/dist/server/route-modules/app-page/module.js')\n} else {\n  if (process.env.__NEXT_EXPERIMENTAL_REACT) {\n    if (process.env.NODE_ENV === 'development') {\n      module.exports = require('next/dist/compiled/next-server/app-page-experimental.runtime.dev.js')\n    } else if (process.env.TURBOPACK) {\n      module.exports = require('next/dist/compiled/next-server/app-page-turbo-experimental.runtime.prod.js')\n    } else {\n      module.exports = require('next/dist/compiled/next-server/app-page-experimental.runtime.prod.js')\n    }\n  } else {\n    if (process.env.NODE_ENV === 'development') {\n      module.exports = require('next/dist/compiled/next-server/app-page.runtime.dev.js')\n    } else if (process.env.TURBOPACK) {\n      module.exports = require('next/dist/compiled/next-server/app-page-turbo.runtime.prod.js')\n    } else {\n      module.exports = require('next/dist/compiled/next-server/app-page.runtime.prod.js')\n    }\n  }\n}\n"],"names":["process","env","NEXT_RUNTIME","module","exports","require","__NEXT_EXPERIMENTAL_REACT","NODE_ENV","TURBOPACK"],"mappings":";AAAA,IAAIA,QAAQC,GAAG,CAACC,YAAY,KAAK,MAAQ;;AAEzC,OAAO;IACL,IAAIF,QAAQC,GAAG,CAACK,uBAA2B,EAAF;;IAQzC,OAAO;QACL,IAAIN,QAAQC,GAAG,CAACM,QAAQ,KAAK,WAAe;YAC1CJ,OAAOC,OAAO,GAAGC,QAAQ;QAC3B,OAAO,IAAIL,QAAQC,GAAG,CAACO,SAAS,EAAE;;QAIlC;IACF;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 827, "column": 0}, "map": {"version":3,"sources":["file:///Users/pranjalchaitanya/Documents/sp25-cs411-team100-sudo_rm_rf/frontend/node_modules/next/src/server/route-modules/app-page/vendored/ssr/react-jsx-dev-runtime.ts"],"sourcesContent":["module.exports = require('../../module.compiled').vendored[\n  'react-ssr'\n].ReactJsxDevRuntime\n"],"names":["module","exports","require","vendored","ReactJsxDevRuntime"],"mappings":";AAAAA,OAAOC,OAAO,GAAGC,QAAQ,4HAAyBC,QAAQ,CACxD,YACD,CAACC,kBAAkB","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 834, "column": 0}, "map": {"version":3,"sources":["file:///Users/pranjalchaitanya/Documents/sp25-cs411-team100-sudo_rm_rf/frontend/node_modules/next/src/server/route-modules/app-page/vendored/ssr/react.ts"],"sourcesContent":["module.exports = require('../../module.compiled').vendored['react-ssr'].React\n"],"names":["module","exports","require","vendored","React"],"mappings":";AAAAA,OAAOC,OAAO,GAAGC,QAAQ,4HAAyBC,QAAQ,CAAC,YAAY,CAACC,KAAK","ignoreList":[0],"debugId":null}}]
}